function strStr(haystack: string, needle: string): number {
    if (needle.length === 0) return 0;
    
    // Build the LPS (Longest Proper Prefix which is also Suffix) array
    const buildLPS = (pattern: string): number[] => {
        const lps: number[] = new Array(pattern.length).fill(0);
        let len: number = 0;
        let i: number = 1;
        
        while (i < pattern.length) {
            if (pattern[i] === pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len !== 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    };
    
    const lps: number[] = buildLPS(needle);
    let i: number = 0; // haystack index
    let j: number = 0; // needle index
    
    while (i < haystack.length) {
        if (haystack[i] === needle[j]) {
            i++;
            j++;
        }
        
        if (j === needle.length) {
            return i - j; // Found at index i - j
        } else if (i < haystack.length && haystack[i] !== needle[j]) {
            if (j !== 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
    
    return -1;
}