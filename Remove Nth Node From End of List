// Definition for singly-linked list.
class ListNode {
    val: number;
    next: ListNode | null;
    constructor(val?: number, next?: ListNode | null) {
        this.val = (val === undefined ? 0 : val);
        this.next = (next === undefined ? null : next);
    }
}

function removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {
    let dummy = new ListNode(0, head);
    let fast: ListNode | null = dummy;
    let slow: ListNode | null = dummy;

    // Move fast ahead by n+1 steps
    for (let i = 0; i <= n; i++) {
        fast = fast!.next;
    }

    // Move both pointers until fast hits the end
    while (fast) {
        fast = fast.next;
        slow = slow!.next;
    }

    // Remove the nth node from end
    if (slow && slow.next) {
        slow.next = slow.next.next;
    }

    return dummy.next;
}

// ---- Helpers for Demo & Testing ----
function buildList(arr: number[]): ListNode | null {
    let dummy = new ListNode(0);
    let curr = dummy;
    for (let num of arr) {
        curr.next = new ListNode(num);
        curr = curr.next;
    }
    return dummy.next;
}

function toArray(head: ListNode | null): number[] {
    const arr: number[] = [];
    while (head) {
        arr.push(head.val);
        head = head.next;
    }
    return arr;
}

// ---- Example Test ----
const head = buildList([1,2,3,4,5]);
console.log(toArray(removeNthFromEnd(head, 2))); // [1,2,3,5]